{
	"folder_history":
	[
		"/home/walker/code/cryptobot",
		"/home/walker/code/bitbot"
	],
	"last_version": 3059,
	"last_window_id": 19,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 1422.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system": "",
			"command_palette":
			{
				"height": 72.0,
				"selected_items":
				[
					[
						"Package Control: In",
						"Package Control: Install Package"
					]
				],
				"width": 449.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/walker/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/walker/bin/startt",
				"/home/walker/.zshenv",
				"/home/walker/.zprofile",
				"/home/walker/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 0.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 0.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"replace":
			{
				"height": 0.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 1920.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"file": "/home/walker/.config/awesome/rc.lua",
					"settings":
					{
						"buffer_size": 22179,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/walker/.config/awesome/theme.lua",
					"settings":
					{
						"buffer_size": 5119,
						"line_ending": "Unix"
					}
				},
				{
					"contentshe following lines were added by compinstall\n\nzstyle ':completion:*' auto-description '%d'\nzstyle ':completion:*' completer _expand _complete _ignored _correct _approximate\nzstyle ':completion:*' file-sort name\nzstyle ':completion:*' format '%d'\nzstyle ':completion:*' list-colors ''\nzstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s\nzstyle ':completion:*' list-suffixes true\nzstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} m:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=** r:|=**' 'l:|=* r:|=*'\nzstyle ':completion:*' menu select=0\nzstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s\nzstyle ':completion:*' use-compctl true\nzstyle ':completion:*' verbose true\nzstyle :compinstall filename '/home/walker/.zshrc'\n\nautoload -Uz compinit\ncompinit\n# End of lines added by compinstall\n# Lines configured by zsh-newuser-install\nHISTFILE=~/.zsh_history\nHISTSIZE=1000\nSAVEHIST=1500\nsetopt appendhistory autocd notify rmstarsilent extendedglob\nunsetopt nomatch\nbindkey -v\n# End of lines configured by zsh-newuser-install\nsetopt completealiases\nautoload -U promptinit colors\npromptinit\ncolors\n\n# emulate -L zsh\n\nif [[ $BITS -eq 32 ]]\nthen\n    CHROOT_STR=\"[32]\"\nelse\n    CHROOT_STR=\"\"\nfi\n\nPROMPT=\"%{$fg[blue]%}%n%{$reset_color%}@%{$fg[blue]%}%m%{$reset_color%}$CHROOT_STR %{$fg[magenta]%}%d %{$reset_color%}\n%# \"\nRPROMPT=\"%(?..[%{$fg[yellow]%}%?%{$reset_color%}])\"\n\nsource /usr/share/doc/pkgfile/command-not-found.zsh\n\n# create a zkbd compatible hash;\n# to add other keys to this hash, see: man 5 terminfo\ntypeset -A key\n\nkey[Home]=${terminfo[khome]}\nkey[End]=${terminfo[kend]}\nkey[Insert]=${terminfo[kich1]}\nkey[Delete]=${terminfo[kdch1]}\n\n# setup key accordingly\n[[ -n \"${key[Home]}\"    ]]  && bindkey  \"${key[Home]}\"    beginning-of-line\n[[ -n \"${key[End]}\"     ]]  && bindkey  \"${key[End]}\"     end-of-line\n[[ -n \"${key[Insert]}\"  ]]  && bindkey  \"${key[Insert]}\"  overwrite-mode\n[[ -n \"${key[Delete]}\"  ]]  && bindkey  \"${key[Delete]}\"  delete-char\n\n# Finally, make sure the terminal is in application mode, when zle is\n# active. Only then are the values from $terminfo valid.\nif (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then\n    function zle-line-init () {\n        printf '%s' \"${terminfo[smkx]}\"\n    }\n    function zle-line-finish () {\n        printf '%s' \"${terminfo[rmkx]}\"\n    }\n    zle -N zle-line-init\n    zle -N zle-line-finish\nfi\n\nexport PATH=/home/walker/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/android-sdk/tools:/opt/android-sdk/platform-tools\n\n# Custom aliases/functions\n\n# Development\nalias gcc='gcc -Wall -Og -g -std=c11 -mtune=generic'\nalias g++='g++ -Wall -Og -g -std=c++11 -mtune=generic'\nalias ghc='ghc --make -Wall -O'\nalias javac='javac -Xlint:all'\nalias bitbot_env='source ~/.virtualenv/bitbot/bin/activate'\n\n# Administration\nalias modified='yaourt -Qii | sed -n \"s/^MODIFIED\\t//p\"'\n\nunattached() {\n    for i in `tmux list-sessions | grep -v attached | cut -c 1`\n    do\n        tmux kill-session -t $i\n    done\n}\n\n# Util\nalias shred='shred -fuz'\nalias ls='ls -l --color=auto --almost-all --human-readable --classify --group-directories-first --dereference-command-line-symlink-to-dir'\nalias cp='cp --no-dereference --preserve=all --recursive --verbose' \nalias rm='rm --force --recursive'\nalias mv='mv --verbose'\nalias grep='grep --color=auto --no-messages --binary-files=without-match'\nalias more='less'\nalias mkdir='mkdir --parents --verbose'\nalias find='find -O3'\n\nprocess () {\n    count=`pgrep -c $@`\n    if [[ $count -eq 0 ]]\n    then\n        echo \"No matching processes\"\n    else\n        ps wwup `pgrep $@`\n    fi\n}\n\n\n# System control\nalias reboot='systemctl reboot'\nalias poweroff='systemctl poweroff'\nalias suspend='systemctl suspend'\n\nmirrors() {\n    [ \"$UID\" != 0 ] && su=sudo\n    \n    country='US'\n    url=\"https://www.archlinux.org/mirrorlist/?country=$country&protocol=ftp&protocol=http&ip_version=4&use_mirror_status=on\"\n    \n    tmpfile=$(mktemp --suffix=-mirrorlist)\n    \n    wget -qO- \"$url\" | sed 's/^#Server/Server/g' > \"$tmpfile\"\n    \n    if [ -s \"$tmpfile\" ]\n    then\n        { echo \" Backing up the original mirrorlist...\"\n        $su mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig; } && { echo \" Rotating the new list into place...\"\n        $su mv -i \"$tmpfile\" /etc/pacman.d/mirrorlist; }\n    else\n        echo \" Unable to update, could not download list.\"\n    fi\n    \n    chmod +r /etc/pacman.d/mirrorlist\n}\n\norphans() {\n    if [[ ! -n $(yaourt -Qdtq) ]]\n    then\n        echo \"no orphans to remove\"\n    else\n        yaourt -Rs $(yaourt -Qdtq)\n    fi\n}\n\npkgcache() {\n    cache=`yaourt -v 2>/dev/null | grep \"Cache Dirs\" | cut -d ':' -f 2 | sed 's/ //g'`\n\n    for pkg in `comm -23 <(yaourt -Qq | sort) <(yaourt -Qmq | sort)`\n    do\n        if ! ls $cache/`yaourt -Q $pkg | sed 's/ /-/g'`* 2>/dev/null >&2\n 	    then\n            yaourt -Sw --noconfirm $pkg\n        fi\n    done\n}\n\npkgclean() {\n    ignoregrp=\"base base-devel xorg\"\n    ignorepkg=\"\"\n    \n    tmpdir=/tmp\n    ignored=$tmpdir/ignored\n    installed=$tmpdir/installed\n    \n    echo $(pacman -Sg $ignoregrp | awk '{print $2}') $ignorepkg | tr ' ' '\\n' | sort | uniq > $ignored\n    pacman -Qq | sort > $installed\n    \n    loop=$(comm -13 $ignored $installed)\n    \n    for line in $loop; do\n        check=$(pacman -Qi $line | awk '/Required By/ {print $4}')\n        if [ \"$check\" == 'None' ]; then echo $line; fi\n    done\n    \n    #rm $ignored $installed\n}\n\n",
					"file": "/home/walker/.zshrc",
					"file_size": 5510,
					"file_write_time": 130341739654794752,
					"settings":
					{
						"buffer_size": 6296,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"command_palette":
			{
				"height": 72.0,
				"selected_items":
				[
					[
						"Package Control: In",
						"Package Control: Install Package"
					]
				],
				"width": 449.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/walker/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/walker/bin/startt",
				"/home/walker/.zshenv",
				"/home/walker/.zprofile",
				"/home/walker/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 0.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/walker/.config/awesome/rc.lua",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22179,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Lua/Lua.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 5879.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/walker/.config/awesome/theme.lua",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5119,
								"regions":
								{
								},
								"selection":
								[
									[
										403,
										403
									]
								],
								"settings":
								{
									"syntax": "Packages/Lua/Lua.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 2,
							"file": "/home/walker/.zshrc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6296,
								"regions":
								{
								},
								"selection":
								[
									[
										786,
										786
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true,
									"word_wrap": true
								},
								"translation.x": 5507.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 0.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"position": "0,0,0,0,0,0,18,1920,1440,2560,1440",
			"project": "",
			"replace":
			{
				"height": 0.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 1,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"d",
						"distutils"
					],
					[
						"lib",
						"libdir"
					],
					[
						"o",
						"OBJS_O"
					],
					[
						"CY",
						"CYTHON_CFLAGS"
					],
					[
						"ins",
						"insert"
					],
					[
						"user",
						"username"
					],
					[
						"A",
						"ALL_CFLAGS"
					],
					[
						"bot",
						"bot_db"
					],
					[
						"us",
						"username"
					],
					[
						"djano",
						"django_db"
					],
					[
						"S",
						"StoreQueryResult"
					],
					[
						"M",
						"MYSQLPP_CFLAGS"
					],
					[
						"mysql",
						"mysqlpp"
					],
					[
						"pri",
						"private"
					],
					[
						"T",
						"TAReflector"
					],
					[
						"TA",
						"TAWrapper"
					],
					[
						"inc",
						"inc	#include \"…\""
					],
					[
						"st",
						"staticmethod"
					],
					[
						"__",
						"__doc__"
					],
					[
						"_",
						"_Key"
					],
					[
						"ex",
						"extends"
					],
					[
						"class",
						"classmethod"
					],
					[
						"cre",
						"create"
					],
					[
						"Mt",
						"MtGoxClient"
					],
					[
						"stat",
						"status_code"
					],
					[
						"json",
						"json_str"
					],
					[
						"sotr",
						"store_keys"
					],
					[
						"uer",
						"username"
					],
					[
						"User",
						"UserDB"
					],
					[
						"ke",
						"key_data"
					],
					[
						"fil",
						"filters"
					],
					[
						"B",
						"BaseDB"
					],
					[
						"res",
						"response"
					],
					[
						"url",
						"urllib"
					],
					[
						"post",
						"post_data"
					],
					[
						"re",
						"response"
					],
					[
						"req",
						"requests"
					],
					[
						"get",
						"get_order"
					],
					[
						"api",
						"api_kwargs"
					],
					[
						"get_",
						"get_tonce"
					],
					[
						"pa",
						"page"
					],
					[
						"wa",
						"wallet_currency"
					],
					[
						"ar",
						"Arguments"
					],
					[
						"sl",
						"shelve"
					],
					[
						"nam",
						"names"
					],
					[
						"pro",
						"protocol"
					],
					[
						"en",
						"encrypted"
					],
					[
						"H",
						"HIGHEST_PROTOCOL"
					],
					[
						"Key",
						"KeyError"
					],
					[
						"_get",
						"_get_encrypted_keys"
					],
					[
						"ino",
						"information"
					],
					[
						"reques",
						"persistent_request"
					],
					[
						"dic",
						"dict"
					],
					[
						"type",
						"typecheck"
					],
					[
						"R",
						"Returns"
					],
					[
						"blo",
						"block_size"
					],
					[
						"bl",
						"block_size"
					],
					[
						"K",
						"Keystore"
					],
					[
						"ra",
						"random_seed"
					],
					[
						"r",
						"random"
					],
					[
						"enc",
						"encrypted"
					],
					[
						"cip",
						"ciphertext"
					],
					[
						"Encr",
						"Encrypt"
					],
					[
						"b",
						"backend"
					],
					[
						"di",
						"dictionary"
					],
					[
						"ty",
						"type_"
					],
					[
						"para",
						"params"
					],
					[
						"am",
						"amount_int"
					],
					[
						"C",
						"ConnectionError"
					],
					[
						"E",
						"Exception"
					],
					[
						"Gox",
						"MtGox"
					],
					[
						"Re",
						"Returns"
					],
					[
						"typ",
						"typecheck_method"
					],
					[
						"Ke",
						"Keystore"
					],
					[
						"Fil",
						"KeystoreFile"
					],
					[
						"func",
						"functools"
					],
					[
						"bas",
						"basestring"
					],
					[
						"KEY",
						"KeystoreDB"
					],
					[
						"dec",
						"decorate"
					],
					[
						"co_",
						"co_argcount"
					],
					[
						"nem",
						"names"
					],
					[
						"del",
						"delete_keys"
					],
					[
						"EN",
						"ENGINE"
					],
					[
						"aes",
						"aes_encrypt"
					],
					[
						"keys",
						"keystore"
					],
					[
						"de",
						"decrypted"
					],
					[
						"key",
						"keyfile"
					],
					[
						"for",
						"format"
					],
					[
						"Error",
						"error"
					],
					[
						"std",
						"stderr"
					],
					[
						"Reques",
						"RequestError"
					],
					[
						"js",
						"json_pretty_format"
					],
					[
						"table",
						"_table"
					],
					[
						"in",
						"information"
					],
					[
						"quo",
						"quote_type"
					],
					[
						"jso",
						"jsonPrettyFormat"
					],
					[
						"b64",
						"b64encode"
					],
					[
						"ap",
						"__api_url"
					]
				]
			},
			"buffers":
			[
				{
					"file": "cryptobot/bots/bots.cpp",
					"settings":
					{
						"buffer_size": 2382,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/bots/interface.pyx",
					"settings":
					{
						"buffer_size": 781,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/bots/setup.py",
					"settings":
					{
						"buffer_size": 640,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/models.py",
					"settings":
					{
						"buffer_size": 909,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/bots/Makefile",
					"settings":
					{
						"buffer_size": 1998,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/bots/bots.hh",
					"settings":
					{
						"buffer_size": 1077,
						"line_ending": "Unix"
					}
				},
				{
					"file": "cryptobot/bots/config.mk",
					"settings":
					{
						"buffer_size": 1197,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"command_palette":
			{
				"height": 296.0,
				"selected_items":
				[
					[
						"inst",
						"Package Control: Install Package"
					],
					[
						"Inst",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						"Package Control: In",
						"Package Control: Install Package"
					]
				],
				"width": 435.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/walker/code/cryptobot/cryptobot/bots/bots.hh",
				"/home/walker/code/cryptobot/cryptobot/bots/setup.py",
				"/home/walker/code/cryptobot/cryptobot/bots/Makefile",
				"/home/walker/code/cryptobot/cryptobot/bots/db.hh",
				"/home/walker/code/cryptobot/cryptobot/bots/ta.hh",
				"/home/walker/code/cryptobot/cryptobot/bots/reflection.hh",
				"/home/walker/code/cryptobot/cryptobot/bots/ta.cpp",
				"/home/walker/code/cryptobot/cryptobot/bots/reflection.cpp",
				"/home/walker/code/cryptobot/cryptobot/bots/db.cpp",
				"/home/walker/code/cryptobot/LICENSE.md",
				"/home/walker/code/cryptobot/cryptobot/static/account-style.css",
				"/home/walker/code/cryptobot/cryptobot/bots/algo.pyx",
				"/home/walker/code/cryptobot/cryptobot/bots/ta_wrapper.hh",
				"/home/walker/code/cryptobot/cryptobot/bots/ta_wrapper.cpp",
				"/home/walker/code/cryptobot/cryptobot/models.py",
				"/home/walker/code/cryptobot/cryptobot/server.py",
				"/home/walker/code/cryptobot/cryptobot/store.py",
				"/home/walker/code/cryptobot/cryptobot/mtgox.py",
				"/home/walker/code/cryptobot/cryptobot/bots/config.mk",
				"/home/walker/code/cryptobot/cryptobot/bots/db.h",
				"/home/walker/code/cryptobot/cryptobot/tmp/structs.cpp",
				"/home/walker/code/cryptobot/cryptobot/tmp/structs.hh",
				"/home/walker/code/cryptobot/cryptobot/views.py.old",
				"/home/walker/code/cryptobot/cryptobot/views.py",
				"/home/walker/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/walker/code/bitbot/cryptobot/views.py",
				"/home/walker/code/bitbot/cryptobot/tests.py",
				"/home/walker/code/bitbot/web/urls.py",
				"/home/walker/code/bitbot/web/settings.py",
				"/home/walker/code/bitbot/bitbot/mtgox.py",
				"/home/walker/code/bitbot/bitbot/models.py",
				"/home/walker/code/bitbot/bitbot/store.py",
				"/home/walker/code/bitbot/manage.py",
				"/home/walker/code/bitbot/README.md",
				"/home/walker/code/bitbot/bitbot/views.py",
				"/home/walker/code/bitbot/bitbot/test.py",
				"/home/walker/code/bitbot/bitbot/__init__.py",
				"/home/walker/code/bitbot/bitbot/keystore.py",
				"/home/walker/code/bitbot/bitbot/admin.py",
				"/home/walker/code/bitbot-master/bitbot/mtgox.py",
				"/home/walker/code/bitbot/bitbot/tmp/keys.txt",
				"/home/walker/code/bitbot/test.py",
				"/home/walker/code/bitbot/util/typecheck.py",
				"/home/walker/code/bitbot/mtgox.py",
				"/home/walker/code/bitbot/keystore.py",
				"/home/walker/code/bitbot/__init__.py",
				"/home/walker/code/bitbot/bitbot/test/test.py",
				"/home/walker/code/bitbot/bitbot/keystore/__init__.py",
				"/home/walker/code/btc/keys.txt",
				"/home/walker/code/bitbot/test/test.py",
				"/home/walker/code/bitbot/keystore/__init__.py",
				"/home/walker/code/bitbot/mtgox/__init__.py",
				"/home/walker/code/bitbot/mtgox/mtgox.py",
				"/home/walker/code/bitbot/keystore/keystore.py",
				"/home/walker/code/bitbot/typecheck/typecheck.py",
				"/home/walker/code/bitbot/MtGox.js",
				"/home/walker/caltech/CS1/placement_test/testing.py",
				"/home/walker/caltech/CS1/placement_test/cells.py",
				"/home/walker/code/bitbot/keystore/make-keystore-db.sql",
				"/home/walker/code/bitbot/keystore/make-keystore.sql",
				"/home/walker/code/bitbot/make-keystore.sql",
				"/home/walker/code/bitbot/make-keystore-db.sql",
				"/home/walker/code/bitbot/test/make-keystore-db.sql",
				"/home/walker/caltech/CS121/5/make-hospital.sql",
				"/home/walker/caltech/CS121/3/make-auto.sql",
				"/home/walker/code/bitbot/test/crypto.py",
				"/home/walker/code/bitbot/aes.c",
				"/home/walker/bin/mpd_status",
				"/home/walker/caltech/CS1/placement_test/fix.py",
				"/home/walker/bin/startt",
				"/home/walker/.zshenv",
				"/home/walker/.zprofile",
				"/home/walker/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 50.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"\n    ",
					"\\(name",
					"(name",
					"\\(name",
					"string ",
					"create",
					"std::string name",
					"char *",
					"std::string\\((.*?)\\)",
					"insert",
					"server",
					"unsigned int",
					"remove",
					"delete",
					"<< ",
					"(std::)(stream)",
					"(std::s)(stream)",
					"(^[a-z])",
					"db::",
					"^",
					"(static)",
					"db::",
					"^",
					"std::string bot::model = \"cryptobot_bot\";",
					"^",
					"db",
					"get",
					"_db",
					"std::string ",
					";\n",
					"\\t",
					"TaInd",
					"itertools.izip",
					"++>",
					"bots",
					"(string)",
					"char \\*",
					"char *",
					"'",
					"(this->)\\*",
					"([a-zA-Z0-9]*?)\\[\\]",
					"const ",
					"([a-zA-Z0-9]*?)\\[\\]",
					"([a-zA-Z]*?)\\[\\]",
					"const ",
					"(^    [a-zA-Z]*? )([a-zA-Z]*?)\\[\\]",
					"([a-zA-Z]*?)\\[\\]",
					"    const ",
					"^    const ",
					"(^    )(TA_.*\\(this)",
					"((TA_.*Wrapper)::\\2.*\\{)(?s)(.*?)\\}",
					"((TA_.*Wrapper)::\\2)(?s)(.*?\\}\\n\\n)(.*?\\2::create.*?\\}\\n\\n)",
					"((TA_.*Wrapper)::\\2.*\\{)(?s)(.*?)\\}",
					"((TA_.*Wrapper)::\\2)(?s)(.*?\\}\\n\\n)(.*?\\2::create.*?\\}\\n\\n)",
					"wrapper",
					"(    TA_.*?Wrapper)(\\(.*\\);\\n)",
					"(    TA_.*?Wrapper)(\\(.*\\);\\n)`",
					"(    TA_.*?Wrapper)(\\(.*\\);\\n)",
					"create",
					"(    TA_.*?Wrapper)(\\(.*\\);\\n)",
					"create",
					"((TA_.*Wrapper)::\\2(?s).*?\\}\\n\\n)(\\2.*?update(?s).*?\\}\\n\\n)",
					"\\n\\n\\n",
					"private:\\n(?s)(.*?)(public:\\n)",
					"private:\\n(?s)(.*?)\\n(public:\\n)",
					"private:\\n(?s)(.*?)\\n(public:)",
					"(^    )(TA_.*\\()",
					"^\\};",
					"\\};",
					"\\n\\n\\n",
					";\\}",
					"((TA_.*Wrapper)::\\2.*\\{)\\n(?s)(    this->(.*?) = \\4;\\n)+",
					" (TA_.*?Wrapper) \\*ta = new \\1\\((.*)\\);",
					" (TA_.*?Wrapper) \\*ta = new \\1\\((.*)\\)",
					"(TA_.*Wrapper::create.*\\{)\\n   ( .*)\\n.*\\n",
					"(TA_.*Wrapper::create.*\\{)\\n   ( .*)\\n   ( .*)\\n",
					"((TA_.*Wrapper)::\\2.*\\{\\n)(?s)(    this->(.*?) = \\4;\\n)+",
					"((TA_.*Wrapper)::\\2)(?s)(.*?\\}\\n\\n)(.*?\\2::create.*?\\}\\n\\n)",
					"((TA_.*Wrapper)::\\2)(?s).*?\\}",
					"(public:\\n    )(TA_.*Wrapper)",
					"REFLECTION",
					"_t",
					"_Wrapper",
					"_t",
					"_Wrapper",
					"Wrapper",
					"\\((int |TA_.*? )",
					"_t",
					"TaBaseWapper",
					"(TaBase)",
					"((TA_.*?_t)::\\2)(?s)(\\(.*?\\))( \\{.*?\\}\\n\\n)",
					"(TA_.*?_t)(\\(.*?\\))(;\\n)",
					"\\n.*run.*\\n",
					"(run\\(\\)) \\{(?s).*?\\}",
					"(_t\\(.*) \\{(?s).*?\\}",
					"(this->.*?, )TA_.*? ",
					"(^(TA_.*_t)::\\2.*)\\n\\}",
					"(TA_RetCode ) ",
					"    \\}\\n\\};",
					"    (TA.*\\n)",
					"class (.*?) (?s).*?    \\1(.*?)    (\\})\\n\\n    (.*? )(run\\(\\) \\{)",
					"class (.*?) (?s).*?    \\1(.*?)    (\\})",
					"((const|unsigned) )?((int|double|float|(?<=\\()TA_.*?) )+(\\*?)([a-zA-Z]+)(\\[\\])?",
					"(const )?((int|double|float) )+(\\*?)([a-zA-Z]+)(\\[\\])?",
					"(TA_.*)(\\(.*\\))(?s)( \\{.*?run.*?)(TA_.*?)(\\})",
					"(TA_.*)(\\(.*\\))(?s)( \\{.*?run.*?TA_.*?)(\\})",
					"(TA_.*)(\\(.*\\))(?s)(.*?run.*?TA_.*?)(\\})",
					"(class TA.* )",
					", \\n\\)",
					"\\n    (.*?\\) \\{\\n    \\})",
					"\\n    (.*?\\))",
					"(?<=, )\\n    (.*);( *?/\\*.*?\\*/)?",
					"(, ) */\\*.*?\\*/",
					", */\\*.*?\\*/",
					"(    .*);\\n\\)",
					"(?<=, )\\n    (.*);",
					", */\\*.*?\\*/",
					"/\\*.*?\\*/",
					"(?<=, )\\n    (.*);",
					"(?<=\\()\\n    (.*);",
					"(class )(.*)( \\{\\nprivate:\\n)(?s)(.*?)(\\})",
					"(class.*\\n)",
					"(    TA_RetCode )\\(\\*func\\)(?s)\\(.*?\\)\\n\\n",
					"typedef struct _(.*)( \\{)",
					"\\(    ",
					"(?s)(.*?\\{\\n)(.*?)(\\})",
					"(.*\\{\\n)(?s)(.*?)(\\})",
					"cls"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": true,
				"replace_history":
				[
					"(<string> name",
					"(<string> ",
					"(char *name",
					"(char *",
					"char *",
					"stop",
					"run",
					"delete",
					"string",
					"std::string ",
					"\\1",
					"delete",
					"host",
					"int",
					"erase",
					"remove",
					"\\1string\\2",
					"\\1tring\\2",
					"constexpr \\1",
					"base_db::",
					"constexpr ",
					"\\1 constexpr",
					"\\1 const",
					"",
					"    static ",
					"base_db",
					"delete",
					"",
					"char *",
					"    ",
					"TAWrapper",
					"zip",
					"reflection",
					"ta_wrapper",
					"std::\\1",
					"string",
					"\"",
					"\\1",
					"*\\1",
					"",
					"*\\1",
					"",
					"\\1*\\2",
					"*\\1",
					"    ",
					"",
					"\\1return \\2",
					"\\1}",
					"\\1\\3\\4void \\2::update\\3",
					"\\1}",
					"\\1\\3\\4\\2 *\\2::update\\3",
					"factory",
					"\\1\\2\\1 *create\\2",
					"\\1\\2\\1 *create\\2\\n",
					"\\1\\2\\1 *create\\2;\\n",
					"void update",
					"\\1\\2\\1 *create\\2;\\n",
					"\\1\\2\\1 *create\\2;",
					"void update",
					"update",
					"\\3\\1",
					"\\2\\1",
					"\\n\\n",
					"\\2\\1",
					"\\1\\2",
					"\\1return \\2",
					"    TA_RetCode run();\\n};",
					"\\n\\n",
					";\\n}",
					"\\1",
					"\\2",
					"\\1\\2",
					"\\1\\2\\3",
					"\\1\\4",
					"\\1\\3\\2::update\\3",
					"\\1\\2() { };\\n    \\2",
					"\\1\\2() {};\\n    \\2",
					"TA_WRAPPER",
					"_Wrapper",
					"_",
					"",
					"Wrap",
					"(\\n    \\1",
					"(\\n\\1",
					"_Wrapper",
					"Wrapper",
					"TAWrapper",
					"\\1Wapper",
					"\\1\\3\\4\\1::create\\3 {\\n    \\1 *ta = new \\1();\\n}\\n\\n",
					"\\1::create\\3 {\\n    \\1 *ta = new \\1();\\n}\\n\\n",
					"\\1\\2\\3    create\\2\\3",
					"",
					"\\1;",
					"\\1this->",
					"\\1}",
					"\\1",
					"}",
					"\\1",
					"\\1::\\1\\2\\3\\n\\n\\4 \\1::\\5",
					"\\1::\\1\\2\\3\\n\\n\\1::\\4",
					"\\1::\\1\\2\\3\\n\\n\\1::",
					"\\1::\\1\\2\\3",
					"this->\\6",
					"this->\\5",
					"\\5",
					"\\4",
					"\\1\\2\\3    \\4\\2;\\n    \\5",
					"\\1\\2\\3\\2;\\n    \\4",
					"\\1\\2\\3\\2\\4",
					"\\1: public TaBase ",
					")",
					"\\1",
					"",
					"\\1, ",
					"\\1",
					"",
					"\\1)",
					"\\1, ",
					", ",
					"",
					"\\1, ",
					"\\1\\2_t\\3\\4\\npublic:\\n    \\2_t(\\n\\4) {\\n    }\\n\\n    TA_RetCode run() {\\n    \\2}\\n\\5",
					"\\1\\2_t\\3\\4\\npublic:\\n    \\2(\\n\\4) {\\n    }\\n\\n    TA_RetCode run() {\\n    \\2}\\n\\5",
					"\\1\\2\\3\\4\\npublic:\\n    \\2(\\n\\4) {\\n    }\\n\\n    TA_RetCode run() {\\n    }\\n\\5",
					"\\1\\2\\3\\4\\npublic:\\n    \\2(\\n\\4) {\\n    }\\n\\n    TA_RetCode run(\\n\\4) {\\n    }\\n\\5",
					"\\1\\2\\3\\4\\npublic:\\n\\2(\\n\\4) {\\n    }\\n\\nTA_RetCode run(\\n\\4) {\\n    }\\n\\5",
					"\\1\\2\\3\\4\\npublic:\\n\\2(\\n\\4) {\\n    }\\n\\nTA_RetCode run(\\n\\4){\\n    }\\5",
					"\\1\\2\\3\\4\\npublic:\\n\\2(\\n\\4) {\\n    }\\nTA_RetCode run(\\n\\4){\\n    }\\5"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "cryptobot/bots/bots.cpp",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2382,
								"regions":
								{
								},
								"selection":
								[
									[
										2382,
										2382
									]
								],
								"settings":
								{
									"syntax": "Packages/C++/C++.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "cryptobot/bots/interface.pyx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 781,
								"regions":
								{
								},
								"selection":
								[
									[
										198,
										198
									]
								],
								"settings":
								{
									"syntax": "Packages/Cython/Cython.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "cryptobot/bots/setup.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 640,
								"regions":
								{
								},
								"selection":
								[
									[
										149,
										149
									]
								],
								"settings":
								{
									"syntax": "Packages/Python/Python.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "cryptobot/models.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 909,
								"regions":
								{
								},
								"selection":
								[
									[
										7,
										7
									]
								],
								"settings":
								{
									"syntax": "Packages/Python/Python.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 4,
							"file": "cryptobot/bots/Makefile",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1998,
								"regions":
								{
								},
								"selection":
								[
									[
										1569,
										1569
									]
								],
								"settings":
								{
									"syntax": "Packages/Makefile/Makefile.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "cryptobot/bots/bots.hh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1077,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/C++/C++.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "cryptobot/bots/config.mk",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1197,
								"regions":
								{
								},
								"selection":
								[
									[
										93,
										93
									]
								],
								"settings":
								{
									"syntax": "Packages/Makefile/Makefile.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 34.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"position": "0,0,0,0,0,0,18,1792,1440,2560,1440",
			"project": "cryptobot.sublime-project",
			"replace":
			{
				"height": 92.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 19,
			"workspace_name": "/home/walker/code/cryptobot/cryptobot.sublime-workspace"
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
			"/home/walker/code/cryptobot/cryptobot.sublime-workspace",
			"/home/walker/code/bitbot/bitbot.sublime-workspace",
			"/home/walker/code/bitbot.sublime-workspace"
		]
	}
}
